{
  
    
        "post0": {
            "title": "WGET this file and complete fully and thoroughly in order to be graded",
            "content": "What are 5 Basic UI Elements?: . 2. 3. | | | In your own words, explain what SASS does: . ### What are some benefits to SASS?: . | | . Describe/Explain one of the more &quot;advanced&quot; SASS properties below in detail: . - . Hacks - Insert any screenshots, code segments, etc. that you need to . Hacks Part 1 . Add your own element to your own repository to make it unique (0.9) | Hacks Part 2 . Add the style change button to your own github page (0.9) Change the button to your own styles | See if you can let make it change to multiple different styles (we understand that it is hard to create multiple distinct styles so you are only required to make it clear you have at least three different styles at can be changed) | . | Extra: Try and incorporate something you learned in the lesson into your CPT Project (0.1) | Hacks Part 3 . Add SASS to Number Guesser Game provided (0.9) or create your own Javascript game/application and add SASS to it (0.9+) | We will collectively decide on the &quot;best&quot; game/app and award potential seed. |",
            "url": "https://anicricket.github.io/tmv4/2023/04/22/studentfile.html",
            "relUrl": "/2023/04/22/studentfile.html",
            "date": " • Apr 22, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P4-Y 4/25 Guide to SASS",
            "content": "Team Lesson Plan . Intro: Introduction to roles and manifesto and what we want students to learn . Part 1: SASS Part 1 - Aniket and Nathan . Part 2: SASS Part 2 - Evan and Max W . Part 3: Building JavaScript Game /Application- Ryan and Jaden . Part 4: Hacks Page - Max T and Kalani . Intro: Introduction to roles, manifesto, etc. . SASS Part 1- Nathan, Aniket . Basic UI Properties and what they mean | SASS Definition/What it is useful for | SASS code segments and how they are good | Demonstration of SASS | . SASS Part 2- Max W, Evan . More SASS Properties | Layouts | Animation/animation code for UI | Hover features for UI | . Building JavaScript Game or Application- Ryan, Jaden . Before vs After Minesweeper Game - how to customize | Building a java script game and what it requires | . Hacks Page - Kalani, Max T . Students must create their own hack (simple app, game, etc using several components from the lesson) | Students must create a new, shareable repo and put their creativity to the test by creating their own application or game using SASS elements | .",
            "url": "https://anicricket.github.io/tmv4/student/2023/04/08/teamplan.html",
            "relUrl": "/student/2023/04/08/teamplan.html",
            "date": " • Apr 8, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Intro To SASS Part 2",
            "content": "Some more ADVANCED SASS Properties... . Here&#39;s an example of how you can use Sass to create an animation effect. . // This defines an animation called fade-in that starts with an opacity of 0 and gradually increases to an opacity of 1. Put this code in your SASS file. @keyframes fade-in { from { opacity: 0; } to { opacity: 1; } } . The @keyframes rule specifies the different states of the animation at different points in time. In this case, it has two states defined using the from and to keywords. . The from state specifies the initial state of the animation, in this case with an opacity of 0. The to state specifies the final state of the animation, with an opacity of 1. . When this animation is applied to an element in CSS, it will gradually transition from an opacity of 0 to 1 over a specified duration. . // Next, you can apply the animation to an element in your CSS using the animation property. You can specify the name of the keyframes, the duration of the animation, and other animation-related properties. This applies the fade-in animation to an element with the class .my-element and specifies the animation duration, timing function, delay, iteration count, direction, and fill mode. .my-element { animation-name: fade-in; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: forwards; } . Here is an example of creating a Grid Layout . // This defines a 3x3 grid with three equal-sized columns and three equal-sized rows using the repeat() function with 1fr unit, which represents a fraction of the available space. $grid-template-columns: repeat(3, 1fr); $grid-template-rows: repeat(3, 1fr); // Next, create a class for your grid container element in your Sass file and apply the grid properties using the Sass variables you defined earlier. This creates a grid container with the display: grid property and sets the grid-template-columns, grid-template-rows, and gap properties using the Sass variables you defined earlier. The gap property adds spacing between the grid items. .grid-container { display: grid; grid-template-columns: $grid-template-columns; grid-template-rows: $grid-template-rows; gap: 1rem; // Add gap between grid items } // Create classes for your grid item elements in your Sass file and specify their position within the grid using the grid-column and grid-row properties. This specifies the position of each grid item within the grid container using the grid-column and grid-row properties. The span value specifies the number of columns or rows the item should span. .grid-item-1 { grid-column: 1 / span 1; // Place in column 1, span 1 column grid-row: 1 / span 1; // Place in row 1, span 1 row } .grid-item-2 { grid-column: 2 / span 1; // Place in column 2, span 1 column grid-row: 1 / span 3; // Place in row 1, span 3 rows } // ... define other grid item classes as needed . // In your html file, put this code now. &lt;div class=&quot;grid-container&quot;&gt; &lt;div class=&quot;grid-item-1&quot;&gt;Grid Item 1&lt;/div&gt; &lt;div class=&quot;grid-item-2&quot;&gt;Grid Item 2&lt;/div&gt; &lt;/div&gt; . Themes . What to know before changing themes: . Stylesheets: To change the visual appearance of an application, you need to modify the stylesheets that control the presentation of the UI elements. This may involve editing and creating styles to fit your application . Configuration files: Applications have configuration files that control the behavior and appearance of the application. You may need to modify these files in order to change the theme. . Here is a demonstration of SASS with a button theme-changer... .",
            "url": "https://anicricket.github.io/tmv4/jupyter/2023/03/26/tutorial2.html",
            "relUrl": "/jupyter/2023/03/26/tutorial2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Intro To SASS Part 1",
            "content": "Basic UI (User Interface) Properities . Color: Hue, saturation, and brightness for things like background, text, buttons, and more. . Font: Size, weight, style, etc. of the text displayed on the UI. . Layout: This refers to the arrangement/positioning of UI elements such as buttons, images, etc . Icons: Symbols used to represent things in the UI. . Interactivity: Things like clicking, dragging, scrolling, etc. . Accessibility: UI that can be used for people with disabilities, for example, color blindness. . SASS will help us perform these properties at the max... . What is SASS and why is SASS useful for us? . SASS stands for syntactically awesome stylesheets. | SASS is extremely helpful because it lessens the overall complexity of customization that we get with coding directly with CSS | SASS creates a compiler that allows us to write stylesheets with .sass and .scss | . What are the differences between all these . SCSS includes all CSS features + more | CSS is a style language that is used to style and create web pages. While SCSS is a particular type of file for SASS, it used the Ruby language, which assembles the browser&#39;s CSS style sheets. | SCSS contains advanced and modified features. | SCSS is more syntax-oriented than CSS. SCSS uses fewer lines in its code than CSS, which makes programming easier . | What are coding benefits: . SASS has variables that we can use | In many cases, classes are used as name spaces, which means they are duplicated over and over again. We can avoid this by nesting styles inside the parent | They already have some built in functions for us to use | Once your done with the UI, the compiler will take your code and convert it to valid CSS that works | . | What are coding drawbacks: . The browser can&#39;t read SASS, only CSS. As a result, you must have the &quot;Live Sass Complier&quot; extension installed. This extension will convert SASS to CSS. | . | . Those were the basics ... next is some examples . Examples of SASS: Can you spot what&#39;s good about it? . Example 1: Variables - Nathan . $primary-color: #4286F4; // prefix is the cash symbol with a colon $secondary-color: #F4A142; .header { background-color: $primary-color; color: $secondary-color; } .button { background-color: $secondary-color; color: $primary-color; } . In this example, we define two variables: $primary-color and $secondary-color. We then use these variables in our styles for the .header and .button classes. By using variables, we can easily change the primary and secondary colors throughout our codebase by simply updating the values of the variables. This can be especially useful for maintaining consistency across a website or application. . Example 2: Nested Styling - Aniket . nav { ul { margin: 0; padding: 0; list-style: none; li { display: inline-block; margin: 0 10px; a { color: #333; text-decoration: none; padding: 5px; border-radius: 5px; &amp;:hover { background-color: #333; color: #fff; } } } } } . In this example, we have a navigation menu (nav) with an unordered list (ul) of menu items (li). We use nesting to define the styles for each level of the menu. For example, the li elements are styled to have display: inline-block and a margin of 0 10px. We then nest another level to style the anchor links (a) within the li elements. Note the use of the &amp; symbol to target the parent element. In this case, we use &amp;:hover to define a hover state for the anchor links within the li elements. . Example 3: Changing Format between devices - Nathan . .container { max-width: 960px; margin: 0 auto; .content { padding: 20px; background-color: #f9f9f9; } @media (min-width: 768px) { display: flex; justify-content: space-between; .sidebar { width: 30%; margin-right: 20px; } .content { width: 70%; padding: 40px; } } } . In this example, we have a container element with a maximum width of 960 pixels and centered margin. Within the container, we have a content section with a background color and padding. Using a media query with @media (min-width: 768px) we apply some changes when the viewport width is 768 pixels or wider. In this case, we use the display property to switch to a flex layout, with the content and sidebar elements arranged side by side. We then use specific styles for the .sidebar and .content elements to adjust their width and margins. Using media queries like this can help you create responsive layouts that adjust to different devices and screen sizes, improving the user experience on different devices. . Steps To Use SASS In YOUR Fastpages . Install the Sass Live compiler on your machine (most of you probably already do) . | Once Sass is installed, you can create Sass files (.scss or .sass) in your Fastpages repository. You can create separate Sass files for different parts of your website, such as layout, typography, colors, etc. . | Write Sass code: Write your CSS styles using Sass syntax in your Sass files. Sass will compile your Sass code into standard CSS code that can be understood by web browsers. . | Compile Sass to CSS: Compile Sass files into CSS using the Sass compiler. The Sass compiler will generate CSS files from your Sass code, which you can then use in your Fastpages project. You can configure the Sass compiler to output the compiled CSS files to a specific directory, such as _sass or assets/css, so that they can be easily included in your Fastpages site. . | Include compiled CSS in your Fastpages: Once you have compiled your Sass files into CSS, you can include the compiled CSS files in your Fastpages project. You can do this by linking to the CSS files in your Jekyll layout or template files, or by including the CSS files directly in your Markdown blog posts using HTML or Markdown syntax. . |",
            "url": "https://anicricket.github.io/tmv4/jupyter/2023/03/26/tutorial1.html",
            "relUrl": "/jupyter/2023/03/26/tutorial1.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Guide to creating a JavaScript Game/Application",
            "content": "There are a few basic steps to successfully create a JavaScript game or application... . Plan your game: Before you start coding, take some time to plan out your game. Decide on the basic rules, objectives, and mechanics of the game. Determine what elements you will need to create, such as game boards, characters, and obstacles. | Start coding: Begin by creating the basic game elements, such as the game board and the player character. Use JavaScript to define the game logic and to add interactivity. | Test and debug: Test your game frequently to ensure that it works correctly. | Enchance game using fancy frontend and additional features | Example of how to Create a game . &lt;html&gt; &lt;head&gt; &lt;title&gt;Guess the Number&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Guess the Number&lt;/h1&gt; &lt;p&gt;Try to guess the number between 1 and 100.&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;guess&quot; placeholder=&quot;Enter your guess&quot;&gt; &lt;button onclick=&quot;checkGuess()&quot;&gt;Submit&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;script&gt; // Generate a random number between 1 and 100 const randomNumber = Math.floor(Math.random() * 100) + 1; let attempts = 0; function checkGuess() { // Get the user&#39;s guess const guess = parseInt(document.getElementById(&quot;guess&quot;).value); // Increase the number of attempts attempts++; // Check if the guess is correct if (guess === randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = `Congratulations! You guessed the number in ${attempts} attempts.`; } else if (guess &lt; randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too low. Guess again.&quot;; } else { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too high. Guess again.&quot;; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . This code is a simple HTML and JavaScript program that creates a number guessing game. Here is how it works: . HTML: The HTML code defines a title, a heading, a piece of text describing the game, an input field for the user to enter their guess, a submit button, and a another piece of text where the result of the guess will be displayed. . | JavaScript: The JavaScript code starts by generating a random number between 1 and 100 using the Math.random() method. It multiplies the result of Math.random() by 100 to get a number between 0 and 99, then adds 1 to the result to get a number between 1 and 100. This random number is stored in the randomNumber variable. . | JavaScript: The checkGuess() function is called when the user clicks the &quot;Submit&quot; button. It gets the value of the guess entered by the user using document.getElementById(&quot;guess&quot;).value and converts it to an integer using parseInt(). The number of attempts is also increased by 1. . | JavaScript: The function then checks if the guess is correct by comparing it to the randomNumber variable. If the guess is correct, a message is displayed in the result paragraph using the innerHTML property. If the guess is too low, a message is displayed asking the user to guess again. If the guess is too high, another message is displayed asking the user to guess again. . | The program will continue to prompt the user to guess until they get the correct number. The number of attempts will be displayed when the user correctly guesses the number. . How to use sass and css to make the game more appealing . how to connect sass/css to html/md: | stores metadata, css* file&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;/&gt; &lt;!--or...--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;.path/style.css&quot;/&gt; &lt;/head&gt; . colors | try using a color scheme for consistent theme | demonstrates use of variables | . dynamics | buttons run functions, but can also change css | hover | . Hacks Part 3 . Add sass to the game provided(0.9) or create your own javascript game and add sass to it(0.9+) . best game gets seed points . &lt;/div&gt; . | .",
            "url": "https://anicricket.github.io/tmv4/jupyter/2023/03/26/javascriptgame.html",
            "relUrl": "/jupyter/2023/03/26/javascriptgame.html",
            "date": " • Mar 26, 2023"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "",
          "content": "Blogs .",
          "url": "https://anicricket.github.io/tmv4/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Minesweeper",
          "content": "Click here to view the leaderboards for this game . enter a username: Check Username choose your number of mines: Enter click here to play!",
          "url": "https://anicricket.github.io/tmv4/_pages/minesweeper.html",
          "relUrl": "/_pages/minesweeper.html",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Number Guesser",
          "content": "Guess the Number . Guess the Number . Try to guess the number between 1 and 100. . Submit . .",
          "url": "https://anicricket.github.io/tmv4/_pages/numbergueser.html",
          "relUrl": "/_pages/numbergueser.html",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Number Guesser v3",
          "content": "Guess the Number . Guess the Number . Try to guess the number between 1 and 100. . Submit . .",
          "url": "https://anicricket.github.io/tmv4/_pages/numberguesser_v3.html",
          "relUrl": "/_pages/numberguesser_v3.html",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page8": {
          "title": "Theme Changer",
          "content": "Theme Changer . You guys can copy this file and change/improve it here is the link . . Toggle Theme .",
          "url": "https://anicricket.github.io/tmv4/_pages/theme-changer.html",
          "relUrl": "/_pages/theme-changer.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anicricket.github.io/tmv4/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}